<?php
require_once(DAWN_SYSTEM . 'Object.php');

/***
 * Class <code>Component</code> is the base class for all components in the
 * system.
 * <p>
 *   A component is an object that has the following properties:
 * </p>
 * <ul>
 *   <li>
 *     It has an owner (an object that controls it)
 *   </li>
 *   <li>
 *     It can be built (by calling <code>build</code>)
 *   </li>
 *   <li>
 *     It can be shown (by calling <code>show</code>) in a Layout
 *   </li>
 * </ul>
 * <p>
 *   The simplest types of components are widgets, but forms and pages are
 *   components as well, even though they are containers for other components.
 * </p>
 * <p>
 *   Combined with the properties of class <code>Object</code>, getting a
 *   component to show its output involves these steps:
 * </p>
 * <ul>
 *   <li>
 *     The component is instantiated (<code>$component =& new Component('name',
 *     $owner)</code>).
 *   </li>
 *   <li>
 *     The component is either restored from cached, or created from scratch
 *     (<code>Cache::loadObject($component)</code> or
 *     <code>$component->create($arguments)</code>).
 *   </li>
 *   <li>
 *     The component is prepared for showing by calling <code>build</code>
 *     (<code>$component->build()</code>).
 *   </li>
 *   <li>
 *     The component is shown by calling <code>show</code>
 *     (<code>$component->show($indent)</code>).
 *   </li>
 * </ul>
 * <p>
 *   The reason that the building and showing processes are separated is that it
 *   gives subclasses more control over the complete process. For example class
 *   <code>Container</code> makes sure that all components in it are built and
 *   shown in the correct order. The order the forms are built in however is
 *   typically not the same as the order they are shown in.
 * </p>
 * <p>
 *   The method <code>show</code> receives a single argument,
 *   <code>$indent</code>, which defines the indentation level of the HTML to
 *   be produced by the component. Every HTML page generated by <b>Dawn</b>
 *   should be nicely formatted, and must conform to the W3C HTML 4.01 standard.
 * </p>
 ***/
class Component extends Object
{
    // DATA MEMBERS

    /***
     * The object that owns this component
     * @type Object
     ***/
    var $owner;

    var $layoutManager;

    // CREATORS

    /***
     * Construct a new component with the specified id and owner
     * @param $id the id of the component
     * @param $owner the object that owns this component
     ***/
    function Component($id, &$owner)
    {
        $this->Object($id);
        $this->owner         =& $owner;
        $this->layoutManager =& new LayoutManager($this);
    }

    function preCreate()
    {
        parent::preCreate();
        $this->setProperty('type'  , '');
        $this->setProperty('access', '');
        $this->setProperty('layout', OBJECT_INVALID_VALUE);
        $this->setProperty('css'   , $this->getDefaultCss());
   }

    function postCreate()
    {
        $this->deleteProperty('type');
        if (($css = $this->getProperty('css')) != '')
        {
            $this->setProperty('css', ' class="' . $css . '"');
        }
        $this->setProperty(
            'layout',
            $this->layoutManager->createLayout($this->getProperty('layout'))
        );
        parent::postCreate();
    }

    // MANIPULATORS

    function load($data)
    {
        parent::load($data['component']);
        $this->layoutManager->loadLayout(
            $this->getProperty('layout'),
            $data['layout']
        );
    }

    /***
     * Build the component. Classes overriding this method should always call
     * the parents' build method.
     * @returns void
     ***/
    function build()
    {
        assert('Debug::checkState("Component", DEBUG_STATE_BUILD)');
        assert('$id = $this->getObjectId()');
        assert('$class = get_class($this)');
        assert('Debug::log("Component: building \'$id\', class \'$class\'")');
    }

    /***
     * Show the component. Classes overriding this method should always call
     * the parents' show method.
     * @param $indent the indentation level to show the component at
     * @returns void
     ***/
    function show($indent)
    {
        assert('Debug::checkState("Component", DEBUG_STATE_SHOW)');
        assert('$id = $this->getObjectId()');
        assert('$class = get_class($this)');
        assert('Debug::log("Component: showing \'$id\', class \'$class\' at level \'$indent\'")');
        $this->layoutManager->showLayout($indent);
    }

    /***
     * Show the component with name $name at indentation level $indent. This
     * method is called from the layout used by this component.
     ***/
    function showComponent($indent, $name)
    {
        assert('Debug::checkState("Window", DEBUG_STATE_SHOW)');
    }

    /***
     * Change the owner of this component
     ***/
    function setOwner(&$owner)
    {
        assert('$id  = $this->getObjectId()');
        assert('$oid = $this->owner->getObjectId()');
        assert('$nid = $owner->getObjectId()');
        assert('Debug::log("Component: changing owner of \'$id\' from \'$oid\' to \'$nid\'")');
        $this->owner =& $owner;
    }

    // ACCESSORS

    function save()
    {
        return array(
            'component' => parent::save(),
            'layout'    => $this->layoutManager->saveLayout()
        );
    }

    /***
     * Return the component's owner.
     * @returns Object
     ***/
    function &getOwner()
    {
        return $this->owner;
    }

    function getAccess()
    {
        return $this->getProperty('access');
    }

    /***
     * Return a static property of the component that became available after
     * this component was created. Subclasses must override this method and
     * call the parent's method if the class doesn't have the property. If the
     * requested property doesn't exist, NULL is returned.
     * @returns Object
     ***/
    function &getStaticProperty($name)
    {
        return NULL;
    }

    /***
     * Return a dynamic property of the component that became available after
     * this component was build. Subclasses must override this method and call
     * the parent's method if the class doesn't have the property. If the
     * requested property doesn't exist, NULL is returned.
     * @returns Object
     ***/
    function &getDynamicProperty($name)
    {
        return NULL;
    }

    /***
     * Return the default Cascading Style Sheet (CSS) class to use for this
     * component. By default the empty string is returned, and thus no class
     * is used.
     * @returns string
     ***/
    function getDefaultCss()
    {
        return '';
    }

    /***
     * Return the alias of the layout to use if none was specified. Subclasses
     * can override this to return a default layout specific for the Window.
     ***/
    function getDefaultLayout()
    {
        return 'flow';
    }
}
?>
